# SPDX-FileCopyrightText: Â© 2024 nosludge <https://github.com/nosludge>
# SPDX-FileContributor: szymonmaszke <github@maszke.co>
#
# SPDX-License-Identifier: Apache-2.0

---
name: "Template Test"

on:
  pull_request:
    branches:
      - "main"
  merge_group:
    types:
      - "checks_requested"
  workflow_dispatch:

permissions: {} # yamllint disable-line rule:braces

jobs:
  template-test:
    timeout-minutes: 30
    name: "Template Test"
    permissions:
      contents: "read"
    runs-on: "ubuntu-latest"
    env:
      GITHUB_TOKEN: "${{ secrets.PRIVATE_REPO_CREATE_DELETE }}"
    steps:
      - name: "Harden Runner"
        # yamllint disable rule:line-length
        uses: "step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6" # v2.8.1
        # yamllint enable rule:line-length
        with:
          egress-policy: "audit"
      - name: "Checkout repository"
        # yamllint disable rule:line-length
        uses: "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332" # v4.1.7
        # yamllint enable rule:line-length
        with:
          path: "template"
          persist-credentials: false
      - name: "Create new repository"
        id: "new_repository"
        env:
          REPOSITORY: "${{ github.repository }}"
          REPOSITORY_OWNER: "${{ github.repository_owner }}"
        run: >
          ./template/template/create_repository.sh
          "${REPOSITORY}"
          "${REPOSITORY_OWNER}"
          "pynudge_test"
      - name: "Check if initialization finished"
        env:
          NEW_REPO: "${{ steps.new_repository.outputs.repo }}"
        run: >
          ./template/template/check_workflow_status.sh
          "${NEW_REPO}"
          template-setup.yml
      - name: "Checkout new repository" # zizmor: ignore[artipacked]
        # yamllint disable rule:line-length
        uses: "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332" # v4.1.7
        # yamllint enable rule:line-length
        with:
          repository: "${{ steps.new_repository.outputs.repo }}"
          token: "${{ secrets.PRIVATE_REPO_CREATE_DELETE }}"
          path: "repo"
      # By default working-directory will be set to the created repo
      # Create a new branch for the changes
      # Should a new issue be created?
      - name: "Setup git credentials"
        uses: "./repo/.github/actions/setup-git"
      - name: "Create new branch"
        working-directory: "./repo"
        run: >
          git checkout -b template-test
      - name: "Generate dummy library in the new repository"
        run: >
          cp -r
          ./template/template/test_library/*
          ./repo/
      - name: "Create cookiecutter for dummy library"
        env:
          NEW_REPO: "${{ steps.new_repository.outputs.repo }}"
          REPOSITORY_OWNER: "${{ github.repository_owner }}"
        run: >
          ./template/template/create_cookiecutter_json.sh
          ./repo/src/cookiecutter.json
          repository "\"${NEW_REPO}\""
          repository_owner "\"${REPOSITORY_OWNER}\""
      - name: "Setup Python"
        # yamllint disable rule:line-length
        uses: "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d" # v5.1.0
        # yamllint enable rule:line-length
        with:
          #
          #           DO NOT EDIT UNTIL end marker
          #
          # [[[cog
          # import cog
          # import cogeol
          #
          # cycle = cogeol.scientific()[-1]["cycle"]
          # cog.out(f"          python-version: '{cycle}'")
          # ]]]
          python-version: "3.11"
          # [[[end]]]
      - name: "Install cookiecutter"
        run: >
          pip install cookiecutter
      - name: "Run cookiecutter"
        working-directory: "./repo"
        run: >
          cookiecutter --verbose --no-input
          src --output-dir ./generated_src
      - name: "Switch current src with the generated one"
        working-directory: "./repo"
        run: |
          rm -rf src
          mv generated_src src
      # From now on standard pushing procedure can be used
      - name: "Setup PDM binary"
        # yamllint disable rule:line-length
        run: |
          curl -sSLO https://pdm-project.org/install-pdm.py
          curl -sSL https://pdm-project.org/install-pdm.py.sha256 | shasum -a 256 -c -
          python3 install-pdm.py
        # yamllint enable rule:line-length
      - name: "Load cached dependencies"
        id: "dependencies-cache"
        # yamllint disable rule:line-length
        uses: "actions/cache/restore@6849a6489940f00c2f30c0fb92c6274307ccb58a" # v4.1.2
        # yamllint enable rule:line-length
        with:
          path: |
            __pypackages__
            /home/runner/.local/share/pdm/python
          key: "test-${{ runner.os }}-${{ hashFiles('pdm.lock') }}"
      - name: "Check outdated PDM packages"
        working-directory: "repo"
        run: >
          pdm outdated
      - name: "Setup PDM developer environment"
        working-directory: "repo"
        if: >
          steps.dependencies-cache.outputs.cache-hit != 'true'
        run: >
          pdm setup
      - name: "Run all pre-commit checks"
        working-directory: "repo"
        run: >
          SKIP=conform pdm run pre-commit run --all-files
      - name: "Push changes"
        working-directory: "./repo"
        run: |
          git add --all
          git commit -s -m "feat: add dummy library"
          # No verify for push to skip GPG checks
          SKIP=conform git push --no-verify
      - name: "Create pull request"
        working-directory: "./repo"
        run: >
          gh pr create --title "feat: create dummy library"
          --body "Create initial release" --base main --head template-testing
      - name: "Merge pull request"
        working-directory: "./repo"
        run: >
          gh pr merge --auto --squash --delete-branch
      - name: "Check actions succeeded"
        working-directory: "./template"
        env:
          NEW_REPO: "${{ steps.new_repository.outputs.repo }}"
        run: >
          parallel -j0 --halt now,fail=1
          ./template/template/check_workflow_status.sh
          "${NEW_REPO}" {} 20 :::
          release.yml cache.yml
      - name: "Remove test repository"
        # Do not run it in case the event was dispatched
        # If so, assume manual inspection is needed
        # if: ${{ always() && github.event_name != 'workflow_dispatch' }}
        if: >
          always()
        env:
          NEW_REPO: "${{ steps.new_repository.outputs.repo }}"
        run: >
          gh repo delete "${NEW_REPO}" --yes
...
